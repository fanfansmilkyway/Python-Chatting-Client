name: Build Executables for macOS and Windows

on:
  push:
    branches:
      - release
    tags:
      - 'v*'  # Trigger this workflow when you push a tag (e.g., v1.0.0)

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macos-latest, windows-latest]

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Build executable for macOS
        if: matrix.os == 'macos-latest'
        run: |
          # Set the deployment target to an older macOS version for compatibility
          export MACOSX_DEPLOYMENT_TARGET=10.13  # Set the target to an older version of macOS
          pyinstaller --onefile --windowed client.py

      - name: List dist after build (for debugging)
        if: matrix.os == 'macos-latest'
        run: |
          ls -R dist/

      - name: Package for macOS
        if: matrix.os == 'macos-latest'
        run: |
          mkdir -p dist/macos
          mv dist/client.app dist/macos/Python-Chatting.app

      - name: Build executable for Windows
        if: matrix.os == 'windows-latest'
        run: |
          pyinstaller --onefile --windowed client.py
          mkdir -p dist/windows
          mv dist/client.exe dist/windows/Python-Chatting.exe

      - name: Upload macOS build artifact
        uses: actions/upload-artifact@v3
        with:
          name: macOS-python-chatting  # Name of the artifact
          path: dist/macos/Python-Chatting.app  # Path to the artifact

      - name: Upload build artifacts (Windows)
        if: matrix.os == 'windows-latest'
        uses: actions/upload-artifact@v3
        with:
          name: windows-python-chatting
          path: dist/windows/*

  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}  # This uses the tag that triggered the workflow
          release_name: Release ${{ github.ref_name }}
          draft: false
          prerelease: false

      - name: Download macOS build artifact
        uses: actions/download-artifact@v3
        with:
          name: macOS-python-chatting
          path: dist/macos/Python-Chatting.app

      - name: Zip the macOS app
        run: zip -r dist/macos/Python-Chatting-MacOS.zip dist/macos/Python-Chatting.app

      - name: List dist directory for debugging
        run: ls -R ./dist/macos

      - name: Upload macOS app to Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: dist/macos/Python-Chatting-MacOS.zip
          asset_name: Python-Chatting.zip
          asset_content_type: application/zip

      - name: Download Windows build artifact
        uses: actions/download-artifact@v3
        with:
          name: windows-python-chatting
          path: dist/windows/Python-Chatting-Windows.exe

      - name: Upload Windows exe to Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: dist/windows/Python-Chatting-Windows.exe
          asset_name: Python-Chatting-Windows.exe
          asset_content_type: application/octet-stream
